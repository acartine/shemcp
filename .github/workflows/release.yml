name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering of releases

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper changelog generation
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          
      - name: Print Node and npm versions
        run: |
          node -v
          npm -v
          
      - name: Verify npm auth and registry (no secrets)
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "registry=$(npm config get registry)"
          echo "whoami:"
          npm whoami --registry=https://registry.npmjs.org || true
          echo "ping:"
          npm ping --registry=https://registry.npmjs.org || true
          
      - run: npm ci
      - run: npm run build
      
      - name: Create Release PR or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm publish --provenance --access public
          title: "Release: Update versions and publish to npm"
          commit: "chore: release packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Detect if package was published
        id: detect_publish
        run: |
          # Check if this is a Release PR merge (commit message starts with "chore: release packages")
          LAST_COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Last commit: $LAST_COMMIT_MSG"

          # Check the current and remote npm versions
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NPM_VERSION=$(npm view shemcp version 2>/dev/null || echo "0.0.0")

          echo "Current package.json version: $CURRENT_VERSION"
          echo "Latest npm version: $NPM_VERSION"

          # A package was published if either:
          # 1. changesets says it published (direct push with changesets)
          # 2. We just merged a Release PR and the versions now match
          if [ "${{ steps.changesets.outputs.published }}" == "true" ]; then
            echo "Changesets reports packages were published"
            echo "published=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          elif [[ "$LAST_COMMIT_MSG" == "chore: release packages"* ]] && [ "$CURRENT_VERSION" == "$NPM_VERSION" ]; then
            echo "Release PR was merged and package is now published"
            echo "published=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No package publish detected"
            echo "published=false" >> $GITHUB_OUTPUT
          fi


      - name: Publish to GitHub Packages
        if: steps.detect_publish.outputs.published == 'true'
        continue-on-error: true
        run: |
          # Update package name for GitHub Packages (scoped to owner)
          npm pkg set name='@acartine/shemcp'

          # Configure authentication for GitHub Packages
          npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}

          # Publish to GitHub Packages
          npm publish --registry=https://npm.pkg.github.com --access public || echo "GitHub Packages publish failed (non-blocking)"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract changelog for release
        if: steps.detect_publish.outputs.published == 'true'
        id: changelog
        run: |
          # Extract the latest version section from CHANGELOG.md
          VERSION="${{ steps.detect_publish.outputs.version }}"
          echo "Extracting changelog for version $VERSION"
          
          # Find the section for this version and extract until the next version
          awk "/^## \\[$VERSION\\] - / {flag=1; next} /^## \\[/ {flag=0} flag" CHANGELOG.md > release_notes.md
          
          # If no specific version found, use the Unreleased section
          if [ ! -s release_notes.md ]; then
            awk "/^## \\[Unreleased\\]/ {flag=1; next} /^## \\[/ {flag=0} flag" CHANGELOG.md > release_notes.md
          fi
          
          # Convert to GitHub markdown format
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Create GitHub Release
        if: steps.detect_publish.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.detect_publish.outputs.version }}
          name: üöÄ Release v${{ steps.detect_publish.outputs.version }}
          body: |
            ## üì¶ What's New in v${{ steps.detect_publish.outputs.version }}
            
            ${{ env.RELEASE_NOTES }}
            
            ## üìã Package Information
            
            - **npm Package**: [shemcp](https://www.npmjs.com/package/shemcp)
            - **Repository**: [acartine/shemcp](https://github.com/acartine/shemcp)
            - **Version**: v${{ steps.detect_publish.outputs.version }}
            - **License**: MIT
            
            ## üöÄ Installation
            
            ```bash
            # Install globally
            npm install -g shemcp
            
            # Or use with npx
            npx shemcp
            ```
            
            ## üìö Links
            
            - [üìñ Full Changelog](https://github.com/acartine/shemcp/blob/main/CHANGELOG.md)
            - [üìÑ Documentation](https://github.com/acartine/shemcp#readme)
            - [üêõ Report Issues](https://github.com/acartine/shemcp/issues)
            - [üí¨ Discussions](https://github.com/acartine/shemcp/discussions)
            
            ## üéØ Model Context Protocol
            
            This package implements the Model Context Protocol (MCP) for secure shell command execution.
            
            **Thank you for using shemcp!** ‚≠ê
          draft: false
          prerelease: false
          generate_release_notes: false

  auto-merge-release-pr:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for release PR to be created
        run: |
          echo "Waiting for release PR to be created..."
          sleep 30  # Give changesets time to create the PR
          
      - name: Find and auto-merge release PR
        env:
          # Using RELEASE_TOKEN (PAT) instead of GITHUB_TOKEN so the merge
          # will trigger the Release workflow again for actual publishing
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "Searching for release PR..."
          
          # Find the release PR created by changesets
          RELEASE_PR_NUMBER=$(gh pr list --repo ${{ github.repository }} --state open --search "Release: Update versions and publish to npm" --json number --jq '.[0].number')
          
          if [ -n "$RELEASE_PR_NUMBER" ]; then
            echo "Found release PR #$RELEASE_PR_NUMBER"
            
            # Wait a bit more for any CI checks to start
            echo "Waiting for CI checks to begin..."
            sleep 30
            
            # Auto-merge the PR (use --repo flag since we're not in a git directory)
            echo "Auto-merging release PR #$RELEASE_PR_NUMBER..."
            gh pr merge $RELEASE_PR_NUMBER --repo ${{ github.repository }} --squash --auto --delete-branch
            
            echo "‚úÖ Release PR #$RELEASE_PR_NUMBER auto-merged successfully!"
          else
            echo "No release PR found - this might be a direct publish scenario"
          fi

  monitor-auto-merge:
    needs: auto-merge-release-pr
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    if: always()
    steps:
      - name: Monitor auto-merge status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Monitoring auto-merge status..."
          
          # Find the most recent release PR
          RELEASE_PR_NUMBER=$(gh pr list --repo ${{ github.repository }} --state merged --search "Release: Update versions and publish to npm" --json number --jq '.[0].number' || echo "")
          
          if [ -n "$RELEASE_PR_NUMBER" ]; then
            echo "‚úÖ Release process completed successfully!"
            echo "Release PR #$RELEASE_PR_NUMBER was merged"
          else
            echo "‚ÑπÔ∏è  No release PR was merged - changes were published directly"
          fi
          
          echo "üéâ Release automation complete!"
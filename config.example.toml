# Example configuration file for shemcp (MCP Shell Server)
# Copy this to ~/.config/shemcp/config.toml and customize as needed

config_version = 1  # Configuration format version (not the package version)

[server]
name = "shemcp"  # Server identity shown to MCP clients; version comes from package.json

[directories]
# Sandbox root is derived at runtime in the following order:
# 1) SHEMCP_ROOT or MCP_SANDBOX_ROOT environment variable (if set and exists)
# 2) Nearest Git repository root from process.cwd()
# 3) process.cwd() as a fallback
#
# Note: The TOML field below is currently ignored for sandbox selection; prefer
# environment variables for explicit overrides. This key is reserved for
# potential future static overrides.
# root = "/absolute/path"  # Deprecated/ignored; use SHEMCP_ROOT or MCP_SANDBOX_ROOT

[commands]
# Regular expressions for allowed commands (case insensitive)
allow = [
    "^aws(\\s|$)",
    "^az(\\s|$)",
    "^cat(\\s|$)",         # Display file contents
    "^cat(\\s|$)",         # Display file contents
    "^cd(\\s|$)",
    "^cwd(\\s|$)",         # Change/query working directory (custom)
    "^curl(\\s|$)",        # HTTP client
    "^echo(\\s|$)",        # Echo text
    "^find(\\s|$)",        # Find files
    "^for(\\s|$)",
    "^gh(\\s|$)",          # GitHub CLI
    "^git(\\s|$)",         # Git commands
    "^go(\\s|$)",
    "^grep(\\s|$)",        # Search text
    "^head(\\s|$)",        # Show file beginning
    "^ls(\\s|$)",          # List files
    "^make(\\s|$)",        # Make build tool
    "^mkdir(\\s|$)",
    "^node(\\s|$)",
    "^npm(\\s|$)",         # Node package manager
    "^npx(\\s|$)",
    "^nslookup(\\s|$)",
    "^openssl(\\s|$)",
    "^poetry(\\s|$)",
    "^ps(\\s|$)",
    "^pwd(\\s|$)",         # Print working directory
    "^python(\\s|$)",
    "^python3(\\s|$)",
    "^sleep(\\s|$)",
    "^tail(\\s|$)",        # Show file end
    "^task(\\s|$)",        # Task runner
    "^terraform(\\s|$)",
    "^test(\\s|$)",
    "^timeout(\\s|$)",
    "^tsc(\\s|$)",
    "^unzip(\\s|$)",
    "^wget(\\s|$)",        # Web downloader
    "^yarn(\\s|$)",        # Yarn package manager
    "^zip(\\s|$)",
]

# Regular expressions for explicitly denied commands (checked after allow list)
deny = [
    "^git\\s+push\\s+(origin\\s+)?(main|master)(\\s+.*)?$",  # Prevent push to main/master
    "^rm\\s+-rf\\s+/",     # Prevent dangerous recursive deletes
    "^sudo(\\s|$)",        # No privilege escalation
    "^su(\\s|$)",          # No user switching
]

[limits]
# Maximum time per command (1-300 seconds)
timeout_seconds = 60

# Maximum output size per stream in bytes (1KB - 10MB)
max_output_bytes = 2000000

# Note: Clients can override these per command using shell_exec input:
#   { "timeout_seconds": 300, "max_output_bytes": 5000000 }
# Overrides are clamped by the configured maxima above and any server caps.

[environment]
# Environment variables to pass through to commands
whitelist = [
    "PATH",
    "HOME", 
    "USER",
    "LANG",
    "LC_ALL",
    "TERM",
    "SHELL"
]

[security]
# Whether to allow runtime policy changes via shell_set_policy tool
# (Currently informational; the tool is always available in this version.)
allow_runtime_policy_changes = true

# Whether to enforce secure file permissions on config files (600/644)
require_secure_permissions = false